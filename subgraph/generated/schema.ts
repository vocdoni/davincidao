// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
  Int8,
} from "@graphprotocol/graph-ts";

export class Account extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Account entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Account must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Account", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Account | null {
    return changetype<Account | null>(store.get_in_block("Account", id));
  }

  static load(id: string): Account | null {
    return changetype<Account | null>(store.get("Account", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get weight(): BigInt {
    let value = this.get("weight");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set weight(value: BigInt) {
    this.set("weight", Value.fromBigInt(value));
  }

  get lastUpdatedAt(): BigInt {
    let value = this.get("lastUpdatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastUpdatedAt(value: BigInt) {
    this.set("lastUpdatedAt", Value.fromBigInt(value));
  }

  get lastUpdatedBlock(): BigInt {
    let value = this.get("lastUpdatedBlock");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastUpdatedBlock(value: BigInt) {
    this.set("lastUpdatedBlock", Value.fromBigInt(value));
  }

  get firstInsertedBlock(): BigInt {
    let value = this.get("firstInsertedBlock");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set firstInsertedBlock(value: BigInt) {
    this.set("firstInsertedBlock", Value.fromBigInt(value));
  }

  get firstInsertedAt(): BigInt {
    let value = this.get("firstInsertedAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set firstInsertedAt(value: BigInt) {
    this.set("firstInsertedAt", Value.fromBigInt(value));
  }

  get receivedDelegations(): TokenDelegationLoader {
    return new TokenDelegationLoader(
      "Account",
      this.get("id")!.toString(),
      "receivedDelegations",
    );
  }
}

export class Delegator extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Delegator entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Delegator must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Delegator", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Delegator | null {
    return changetype<Delegator | null>(store.get_in_block("Delegator", id));
  }

  static load(id: string): Delegator | null {
    return changetype<Delegator | null>(store.get("Delegator", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get totalDelegationsMade(): BigInt {
    let value = this.get("totalDelegationsMade");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalDelegationsMade(value: BigInt) {
    this.set("totalDelegationsMade", Value.fromBigInt(value));
  }

  get totalDelegationsEver(): BigInt {
    let value = this.get("totalDelegationsEver");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalDelegationsEver(value: BigInt) {
    this.set("totalDelegationsEver", Value.fromBigInt(value));
  }

  get firstDelegatedAt(): BigInt {
    let value = this.get("firstDelegatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set firstDelegatedAt(value: BigInt) {
    this.set("firstDelegatedAt", Value.fromBigInt(value));
  }

  get firstDelegatedBlock(): BigInt {
    let value = this.get("firstDelegatedBlock");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set firstDelegatedBlock(value: BigInt) {
    this.set("firstDelegatedBlock", Value.fromBigInt(value));
  }

  get lastDelegatedAt(): BigInt {
    let value = this.get("lastDelegatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastDelegatedAt(value: BigInt) {
    this.set("lastDelegatedAt", Value.fromBigInt(value));
  }

  get lastDelegatedBlock(): BigInt {
    let value = this.get("lastDelegatedBlock");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastDelegatedBlock(value: BigInt) {
    this.set("lastDelegatedBlock", Value.fromBigInt(value));
  }

  get delegations(): TokenDelegationLoader {
    return new TokenDelegationLoader(
      "Delegator",
      this.get("id")!.toString(),
      "delegations",
    );
  }
}

export class TokenDelegation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TokenDelegation entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TokenDelegation must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("TokenDelegation", id.toString(), this);
    }
  }

  static loadInBlock(id: string): TokenDelegation | null {
    return changetype<TokenDelegation | null>(
      store.get_in_block("TokenDelegation", id),
    );
  }

  static load(id: string): TokenDelegation | null {
    return changetype<TokenDelegation | null>(store.get("TokenDelegation", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get nftIndex(): BigInt {
    let value = this.get("nftIndex");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set nftIndex(value: BigInt) {
    this.set("nftIndex", Value.fromBigInt(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get delegate(): Bytes {
    let value = this.get("delegate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set delegate(value: Bytes) {
    this.set("delegate", Value.fromBytes(value));
  }

  get delegateAccount(): string | null {
    let value = this.get("delegateAccount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set delegateAccount(value: string | null) {
    if (!value) {
      this.unset("delegateAccount");
    } else {
      this.set("delegateAccount", Value.fromString(<string>value));
    }
  }

  get owner(): Bytes {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get delegator(): string | null {
    let value = this.get("delegator");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set delegator(value: string | null) {
    if (!value) {
      this.unset("delegator");
    } else {
      this.set("delegator", Value.fromString(<string>value));
    }
  }

  get delegatorAddress(): Bytes {
    let value = this.get("delegatorAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set delegatorAddress(value: Bytes) {
    this.set("delegatorAddress", Value.fromBytes(value));
  }

  get isDelegated(): boolean {
    let value = this.get("isDelegated");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isDelegated(value: boolean) {
    this.set("isDelegated", Value.fromBoolean(value));
  }

  get delegatedAt(): BigInt {
    let value = this.get("delegatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set delegatedAt(value: BigInt) {
    this.set("delegatedAt", Value.fromBigInt(value));
  }

  get delegatedBlock(): BigInt {
    let value = this.get("delegatedBlock");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set delegatedBlock(value: BigInt) {
    this.set("delegatedBlock", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class CensusRoot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CensusRoot entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CensusRoot must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("CensusRoot", id.toString(), this);
    }
  }

  static loadInBlock(id: string): CensusRoot | null {
    return changetype<CensusRoot | null>(store.get_in_block("CensusRoot", id));
  }

  static load(id: string): CensusRoot | null {
    return changetype<CensusRoot | null>(store.get("CensusRoot", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get root(): BigInt {
    let value = this.get("root");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set root(value: BigInt) {
    this.set("root", Value.fromBigInt(value));
  }

  get updater(): Bytes {
    let value = this.get("updater");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set updater(value: Bytes) {
    this.set("updater", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class GlobalStats extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GlobalStats entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type GlobalStats must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("GlobalStats", id.toString(), this);
    }
  }

  static loadInBlock(id: string): GlobalStats | null {
    return changetype<GlobalStats | null>(
      store.get_in_block("GlobalStats", id),
    );
  }

  static load(id: string): GlobalStats | null {
    return changetype<GlobalStats | null>(store.get("GlobalStats", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalDelegations(): BigInt {
    let value = this.get("totalDelegations");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalDelegations(value: BigInt) {
    this.set("totalDelegations", Value.fromBigInt(value));
  }

  get totalAccounts(): BigInt {
    let value = this.get("totalAccounts");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalAccounts(value: BigInt) {
    this.set("totalAccounts", Value.fromBigInt(value));
  }

  get totalWeight(): BigInt {
    let value = this.get("totalWeight");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalWeight(value: BigInt) {
    this.set("totalWeight", Value.fromBigInt(value));
  }

  get totalUniqueDelegators(): BigInt {
    let value = this.get("totalUniqueDelegators");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalUniqueDelegators(value: BigInt) {
    this.set("totalUniqueDelegators", Value.fromBigInt(value));
  }

  get totalActiveDelegators(): BigInt {
    let value = this.get("totalActiveDelegators");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalActiveDelegators(value: BigInt) {
    this.set("totalActiveDelegators", Value.fromBigInt(value));
  }

  get lastUpdatedAt(): BigInt {
    let value = this.get("lastUpdatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastUpdatedAt(value: BigInt) {
    this.set("lastUpdatedAt", Value.fromBigInt(value));
  }
}

export class TokenDelegationLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): TokenDelegation[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<TokenDelegation[]>(value);
  }
}

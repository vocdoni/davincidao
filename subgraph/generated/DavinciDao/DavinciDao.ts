// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class CensusRootUpdated extends ethereum.Event {
  get params(): CensusRootUpdated__Params {
    return new CensusRootUpdated__Params(this);
  }
}

export class CensusRootUpdated__Params {
  _event: CensusRootUpdated;

  constructor(event: CensusRootUpdated) {
    this._event = event;
  }

  get newRoot(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get blockNumber(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Delegated extends ethereum.Event {
  get params(): Delegated__Params {
    return new Delegated__Params(this);
  }
}

export class Delegated__Params {
  _event: Delegated;

  constructor(event: Delegated) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get nftIndex(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class DelegatedBatch extends ethereum.Event {
  get params(): DelegatedBatch__Params {
    return new DelegatedBatch__Params(this);
  }
}

export class DelegatedBatch__Params {
  _event: DelegatedBatch;

  constructor(event: DelegatedBatch) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get nftIndex(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tokenIds(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }
}

export class Undelegated extends ethereum.Event {
  get params(): Undelegated__Params {
    return new Undelegated__Params(this);
  }
}

export class Undelegated__Params {
  _event: Undelegated;

  constructor(event: Undelegated) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get nftIndex(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class UndelegatedBatch extends ethereum.Event {
  get params(): UndelegatedBatch__Params {
    return new UndelegatedBatch__Params(this);
  }
}

export class UndelegatedBatch__Params {
  _event: UndelegatedBatch;

  constructor(event: UndelegatedBatch) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get nftIndex(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tokenIds(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }
}

export class WeightChanged extends ethereum.Event {
  get params(): WeightChanged__Params {
    return new WeightChanged__Params(this);
  }
}

export class WeightChanged__Params {
  _event: WeightChanged;

  constructor(event: WeightChanged) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get previousWeight(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newWeight(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DavinciDao__getDelegationsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getWeight(): BigInt {
    return this.value0;
  }

  getLeaf(): BigInt {
    return this.value1;
  }
}

export class DavinciDao extends ethereum.SmartContract {
  static bind(address: Address): DavinciDao {
    return new DavinciDao("DavinciDao", address);
  }

  collections(param0: BigInt): Address {
    let result = super.call("collections", "collections(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);

    return result[0].toAddress();
  }

  try_collections(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "collections",
      "collections(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  computeLeaf(account: Address): BigInt {
    let result = super.call("computeLeaf", "computeLeaf(address):(uint256)", [
      ethereum.Value.fromAddress(account),
    ]);

    return result[0].toBigInt();
  }

  try_computeLeaf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "computeLeaf",
      "computeLeaf(address):(uint256)",
      [ethereum.Value.fromAddress(account)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCensusRoot(): BigInt {
    let result = super.call("getCensusRoot", "getCensusRoot():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getCensusRoot(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCensusRoot",
      "getCensusRoot():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getDelegations(account: Address): DavinciDao__getDelegationsResult {
    let result = super.call(
      "getDelegations",
      "getDelegations(address):(uint88,uint256)",
      [ethereum.Value.fromAddress(account)],
    );

    return new DavinciDao__getDelegationsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_getDelegations(
    account: Address,
  ): ethereum.CallResult<DavinciDao__getDelegationsResult> {
    let result = super.tryCall(
      "getDelegations",
      "getDelegations(address):(uint88,uint256)",
      [ethereum.Value.fromAddress(account)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DavinciDao__getDelegationsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
      ),
    );
  }

  getNFTids(nftIndex: BigInt, candidateIds: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      "getNFTids",
      "getNFTids(uint256,uint256[]):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(nftIndex),
        ethereum.Value.fromUnsignedBigIntArray(candidateIds),
      ],
    );

    return result[0].toBigIntArray();
  }

  try_getNFTids(
    nftIndex: BigInt,
    candidateIds: Array<BigInt>,
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getNFTids",
      "getNFTids(uint256,uint256[]):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(nftIndex),
        ethereum.Value.fromUnsignedBigIntArray(candidateIds),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getRootBlockNumber(root: BigInt): BigInt {
    let result = super.call(
      "getRootBlockNumber",
      "getRootBlockNumber(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(root)],
    );

    return result[0].toBigInt();
  }

  try_getRootBlockNumber(root: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRootBlockNumber",
      "getRootBlockNumber(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(root)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTokenDelegations(nftIndex: BigInt, ids: Array<BigInt>): Array<Address> {
    let result = super.call(
      "getTokenDelegations",
      "getTokenDelegations(uint256,uint256[]):(address[])",
      [
        ethereum.Value.fromUnsignedBigInt(nftIndex),
        ethereum.Value.fromUnsignedBigIntArray(ids),
      ],
    );

    return result[0].toAddressArray();
  }

  try_getTokenDelegations(
    nftIndex: BigInt,
    ids: Array<BigInt>,
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getTokenDelegations",
      "getTokenDelegations(uint256,uint256[]):(address[])",
      [
        ethereum.Value.fromUnsignedBigInt(nftIndex),
        ethereum.Value.fromUnsignedBigIntArray(ids),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  rootBlockNumbers(param0: BigInt): BigInt {
    let result = super.call(
      "rootBlockNumbers",
      "rootBlockNumbers(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toBigInt();
  }

  try_rootBlockNumbers(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rootBlockNumbers",
      "rootBlockNumbers(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenDelegate(param0: Bytes): Address {
    let result = super.call(
      "tokenDelegate",
      "tokenDelegate(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(param0)],
    );

    return result[0].toAddress();
  }

  try_tokenDelegate(param0: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "tokenDelegate",
      "tokenDelegate(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  weightOf(param0: Address): BigInt {
    let result = super.call("weightOf", "weightOf(address):(uint88)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBigInt();
  }

  try_weightOf(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("weightOf", "weightOf(address):(uint88)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DelegateCall extends ethereum.Call {
  get inputs(): DelegateCall__Inputs {
    return new DelegateCall__Inputs(this);
  }

  get outputs(): DelegateCall__Outputs {
    return new DelegateCall__Outputs(this);
  }
}

export class DelegateCall__Inputs {
  _call: DelegateCall;

  constructor(call: DelegateCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get nftIndex(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get toProof(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get fromProofs(): Array<DelegateCallFromProofsStruct> {
    return this._call.inputValues[4].value.toTupleArray<DelegateCallFromProofsStruct>();
  }
}

export class DelegateCall__Outputs {
  _call: DelegateCall;

  constructor(call: DelegateCall) {
    this._call = call;
  }
}

export class DelegateCallFromProofsStruct extends ethereum.Tuple {
  get account(): Address {
    return this[0].toAddress();
  }

  get siblings(): Array<BigInt> {
    return this[1].toBigIntArray();
  }
}

export class UndelegateCall extends ethereum.Call {
  get inputs(): UndelegateCall__Inputs {
    return new UndelegateCall__Inputs(this);
  }

  get outputs(): UndelegateCall__Outputs {
    return new UndelegateCall__Outputs(this);
  }
}

export class UndelegateCall__Inputs {
  _call: UndelegateCall;

  constructor(call: UndelegateCall) {
    this._call = call;
  }

  get nftIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get proofs(): Array<UndelegateCallProofsStruct> {
    return this._call.inputValues[2].value.toTupleArray<UndelegateCallProofsStruct>();
  }
}

export class UndelegateCall__Outputs {
  _call: UndelegateCall;

  constructor(call: UndelegateCall) {
    this._call = call;
  }
}

export class UndelegateCallProofsStruct extends ethereum.Tuple {
  get account(): Address {
    return this[0].toAddress();
  }

  get siblings(): Array<BigInt> {
    return this[1].toBigIntArray();
  }
}

export class UpdateDelegationCall extends ethereum.Call {
  get inputs(): UpdateDelegationCall__Inputs {
    return new UpdateDelegationCall__Inputs(this);
  }

  get outputs(): UpdateDelegationCall__Outputs {
    return new UpdateDelegationCall__Outputs(this);
  }
}

export class UpdateDelegationCall__Inputs {
  _call: UpdateDelegationCall;

  constructor(call: UpdateDelegationCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get nftIndex(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get fromProofs(): Array<UpdateDelegationCallFromProofsStruct> {
    return this._call.inputValues[3].value.toTupleArray<UpdateDelegationCallFromProofsStruct>();
  }

  get toProof(): Array<BigInt> {
    return this._call.inputValues[4].value.toBigIntArray();
  }
}

export class UpdateDelegationCall__Outputs {
  _call: UpdateDelegationCall;

  constructor(call: UpdateDelegationCall) {
    this._call = call;
  }
}

export class UpdateDelegationCallFromProofsStruct extends ethereum.Tuple {
  get account(): Address {
    return this[0].toAddress();
  }

  get siblings(): Array<BigInt> {
    return this[1].toBigIntArray();
  }
}

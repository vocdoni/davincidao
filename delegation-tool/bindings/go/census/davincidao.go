// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package census

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// DavinciDaoProofInput is an auto generated low-level Go binding around an user-defined struct.
type DavinciDaoProofInput struct {
	Account       common.Address
	CurrentWeight *big.Int
	Siblings      []*big.Int
}

// DavinciDaoMetaData contains all meta data concerning the DavinciDao contract.
var DavinciDaoMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[{\"name\":\"tokens\",\"type\":\"address[]\",\"internalType\":\"address[]\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"collections\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"token\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"computeLeafWithWeight\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"weight\",\"type\":\"uint88\",\"internalType\":\"uint88\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"pure\"},{\"type\":\"function\",\"name\":\"delegate\",\"inputs\":[{\"name\":\"to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"nftIndex\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"ids\",\"type\":\"uint256[]\",\"internalType\":\"uint256[]\"},{\"name\":\"currentWeightOfTo\",\"type\":\"uint88\",\"internalType\":\"uint88\"},{\"name\":\"toProof\",\"type\":\"uint256[]\",\"internalType\":\"uint256[]\"},{\"name\":\"fromProofs\",\"type\":\"tuple[]\",\"internalType\":\"structDavinciDao.ProofInput[]\",\"components\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"currentWeight\",\"type\":\"uint88\",\"internalType\":\"uint88\"},{\"name\":\"siblings\",\"type\":\"uint256[]\",\"internalType\":\"uint256[]\"}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"getCensusRoot\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getNFTids\",\"inputs\":[{\"name\":\"nftIndex\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"candidateIds\",\"type\":\"uint256[]\",\"internalType\":\"uint256[]\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\",\"internalType\":\"uint256[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getRootBlockNumber\",\"inputs\":[{\"name\":\"root\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getTokenDelegations\",\"inputs\":[{\"name\":\"nftIndex\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"ids\",\"type\":\"uint256[]\",\"internalType\":\"uint256[]\"}],\"outputs\":[{\"name\":\"delegates\",\"type\":\"address[]\",\"internalType\":\"address[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"tokenDelegate\",\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"undelegate\",\"inputs\":[{\"name\":\"nftIndex\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"ids\",\"type\":\"uint256[]\",\"internalType\":\"uint256[]\"},{\"name\":\"proofs\",\"type\":\"tuple[]\",\"internalType\":\"structDavinciDao.ProofInput[]\",\"components\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"currentWeight\",\"type\":\"uint88\",\"internalType\":\"uint88\"},{\"name\":\"siblings\",\"type\":\"uint256[]\",\"internalType\":\"uint256[]\"}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"updateDelegation\",\"inputs\":[{\"name\":\"to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"nftIndex\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"ids\",\"type\":\"uint256[]\",\"internalType\":\"uint256[]\"},{\"name\":\"currentWeightOfTo\",\"type\":\"uint88\",\"internalType\":\"uint88\"},{\"name\":\"fromProofs\",\"type\":\"tuple[]\",\"internalType\":\"structDavinciDao.ProofInput[]\",\"components\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"currentWeight\",\"type\":\"uint88\",\"internalType\":\"uint88\"},{\"name\":\"siblings\",\"type\":\"uint256[]\",\"internalType\":\"uint256[]\"}]},{\"name\":\"toProof\",\"type\":\"uint256[]\",\"internalType\":\"uint256[]\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"event\",\"name\":\"CensusRootUpdated\",\"inputs\":[{\"name\":\"newRoot\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"blockNumber\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Delegated\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"to\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"nftIndex\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"tokenId\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"DelegatedBatch\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"to\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"nftIndex\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"tokenIds\",\"type\":\"uint256[]\",\"indexed\":false,\"internalType\":\"uint256[]\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Undelegated\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"from\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"nftIndex\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"tokenId\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"UndelegatedBatch\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"from\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"nftIndex\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"tokenIds\",\"type\":\"uint256[]\",\"indexed\":false,\"internalType\":\"uint256[]\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"WeightChanged\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"previousWeight\",\"type\":\"uint88\",\"indexed\":false,\"internalType\":\"uint88\"},{\"name\":\"newWeight\",\"type\":\"uint88\",\"indexed\":false,\"internalType\":\"uint88\"}],\"anonymous\":false},{\"type\":\"error\",\"name\":\"AlreadyDelegated\",\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"type\":\"error\",\"name\":\"InvalidBufferSize\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidCollection\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidTokenId\",\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"type\":\"error\",\"name\":\"LeafAlreadyExists\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"LeafCannotBeZero\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"LeafDoesNotExist\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"LeafGreaterThanSnarkScalarField\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"NoNewDelegations\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"NotDelegated\",\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"type\":\"error\",\"name\":\"NotTokenOwner\",\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"type\":\"error\",\"name\":\"ProofRequired\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"WeightOverflow\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"WeightUnderflow\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"WrongSiblingNodes\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ZeroAddress\",\"inputs\":[]}]",
	Bin: "0x608060405234801561000f575f5ffd5b5060405161280538038061280583398101604081905261002e91610156565b80518061006e5760405162461bcd60e51b815260206004820152600a60248201526962616420636f6e66696760b01b604482015260640160405180910390fd5b5f5b818110156100e0575f805460010181558052825183908290811061009657610096610220565b60200260200101515f82815481106100b0576100b0610220565b5f91825260209091200180546001600160a01b0319166001600160a01b0392909216919091179055600101610070565b506100ed600660646100f4565b5050610234565b805f0361011457604051630c01a34b60e41b815260040160405180910390fd5b5f825561012360018301829055565b5050565b634e487b7160e01b5f52604160045260245ffd5b80516001600160a01b0381168114610151575f5ffd5b919050565b5f60208284031215610166575f5ffd5b81516001600160401b0381111561017b575f5ffd5b8201601f8101841361018b575f5ffd5b80516001600160401b038111156101a4576101a4610127565b604051600582901b90603f8201601f191681016001600160401b03811182821017156101d2576101d2610127565b6040529182526020818401810192908101878411156101ef575f5ffd5b6020850194505b83851015610215576102078561013b565b8152602094850194016101f6565b509695505050505050565b634e487b7160e01b5f52603260045260245ffd5b6125c4806102415f395ff3fe608060405234801561000f575f5ffd5b506004361061009b575f3560e01c806389e8a2551161006357806389e8a25514610162578063c1da869114610175578063c333b0f11461018b578063e2bc69f4146101ab578063fdbda0ec146101be575f5ffd5b8063340ae1cd1461009f578063650e5fcf146100b457806366e12bef146100ef57806370e3afa21461012f5780638498be0414610142575b5f5ffd5b6100b26100ad366004612080565b6101d1565b005b6100dc6100c236600461214a565b5f908152600860205260409020546001600160401b031690565b6040519081526020015b60405180910390f35b6101176100fd36600461214a565b60056020525f90815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020016100e6565b6100b261013d366004612080565b61026a565b610155610150366004612161565b6102d2565b6040516100e691906121a8565b6100dc6101703660046121ea565b610441565b6002545f908152600360205260409020546100dc565b61019e610199366004612161565b610455565b6040516100e6919061221d565b6100b26101b936600461225d565b61052d565b6101176101cc36600461214a565b610acf565b6101da88610af6565b6001600160a01b0389166102015760405163d92e233d60e01b815260040160405180910390fd5b5f5f5f5f6102118d8d8d8d610b1a565b9350935093509350805f036102395760405163fcea6b3560e01b815260040160405180910390fd5b6102468484848989610dd0565b6102538d828b8b8b610eb1565b61025b611055565b50505050505050505050505050565b61027388610af6565b6001600160a01b03891661029a5760405163d92e233d60e01b815260040160405180910390fd5b5f5f5f5f6102aa8d8d8d8d6110d8565b93509350935093506102bf8484848b8b6116d1565b801561025b576102538d828b8989610eb1565b60606102dd84610af6565b5f805b83811015610353575f8585838181106102fb576102fb6122d4565b9050602002013590505f61030f8883611752565b5f818152600560205260409020549091506001600160a01b03161580159061033d575061033d88338461177e565b15610349578360010193505b50506001016102e0565b505f816001600160401b0381111561036d5761036d6122e8565b604051908082528060200260200182016040528015610396578160200160208202803683370190505b5090505f805b85811015610433575f8787838181106103b7576103b76122d4565b9050602002013590505f6103cb8a83611752565b5f818152600560205260409020549091506001600160a01b0316158015906103f957506103f98a338461177e565b156104295781858561040a81612310565b96508151811061041c5761041c6122d4565b6020026020010181815250505b505060010161039c565b5090925050505b9392505050565b5f61044c838361182a565b90505b92915050565b606061046084610af6565b816001600160401b03811115610478576104786122e8565b6040519080825280602002602001820160405280156104a1578160200160208202803683370190505b5090505f5b828110156105255760055f6104d3878787868181106104c7576104c76122d4565b90506020020135611752565b81526020019081526020015f205f9054906101000a90046001600160a01b0316828281518110610505576105056122d4565b6001600160a01b03909216602092830291909101909101526001016104a6565b509392505050565b61053685610af6565b5f836001600160401b0381111561054f5761054f6122e8565b604051908082528060200260200182016040528015610578578160200160208202803683370190505b5090505f846001600160401b03811115610594576105946122e8565b6040519080825280602002602001820160405280156105bd578160200160208202803683370190505b5090505f856001600160401b038111156105d9576105d96122e8565b60405190808252806020026020018201604052801561060c57816020015b60608152602001906001900390816105f75790505b5090505f805b8781101561068157876001600160401b03811115610632576106326122e8565b60405190808252806020026020018201604052801561065b578160200160208202803683370190505b5083828151811061066e5761066e6122d4565b6020908102919091010152600101610612565b505f5b87811015610869575f89898381811061069f5761069f6122d4565b9050602002013590506106b38b338361177e565b6106d857604051630e35d34560e11b8152600481018290526024015b60405180910390fd5b5f6106e38c83611752565b5f818152600560205260409020549091506001600160a01b03168061071e576040516349a0267360e11b8152600481018490526024016106cf565b5f82815260056020526040812080546001600160a01b0319169055610744898784611849565b90505f1981036107e45781898781518110610761576107616122d4565b60200260200101906001600160a01b031690816001600160a01b03168152505083878781518110610794576107946122d4565b60200260200101515f815181106107ad576107ad6122d4565b60200260200101818152505060018887815181106107cd576107cd6122d4565b60200260200101818152505085600101955061085a565b838782815181106107f7576107f76122d4565b6020026020010151898381518110610811576108116122d4565b602002602001015181518110610829576108296122d4565b602002602001018181525050878181518110610847576108476122d4565b6020026020010180516001019081815250505b50505050806001019050610684565b505f5b818110156109bc575f848281518110610887576108876122d4565b60200260200101516001600160401b038111156108a6576108a66122e8565b6040519080825280602002602001820160405280156108cf578160200160208202803683370190505b5090505f5b8583815181106108e6576108e66122d4565b602002602001015181101561094d57848381518110610907576109076122d4565b60200260200101518181518110610920576109206122d4565b602002602001015182828151811061093a5761093a6122d4565b60209081029190910101526001016108d4565b508a868381518110610961576109616122d4565b60200260200101516001600160a01b0316336001600160a01b03167f56017da320cb00880eb511a7183d19ed30ca4f9bcf6bf1dffa02ccb76da33915846040516109ab91906121a8565b60405180910390a45060010161086c565b505f5b81811015610abb575f8582815181106109da576109da6122d4565b602002602001015190505f6109f08989846118a0565b90505f198103610a1e5760405163e0a76e8560e01b81526001600160a01b03831660048201526024016106cf565b610ab182878581518110610a3457610a346122d4565b6020026020010151610a4590612328565b8b8b85818110610a5757610a576122d4565b9050602002810190610a699190612342565b610a7a906040810190602001612360565b8c8c86818110610a8c57610a8c6122d4565b9050602002810190610a9e9190612342565b610aac906040810190612379565b610eb1565b50506001016109bf565b50610ac4611055565b505050505050505050565b5f8181548110610add575f80fd5b5f918252602090912001546001600160a01b0316905081565b5f548110610b175760405163517172a160e11b815260040160405180910390fd5b50565b6060805f80846001600160401b03811115610b3757610b376122e8565b604051908082528060200260200182016040528015610b60578160200160208202803683370190505b509350846001600160401b03811115610b7b57610b7b6122e8565b604051908082528060200260200182016040528015610ba4578160200160208202803683370190505b5092505f856001600160401b03811115610bc057610bc06122e8565b604051908082528060200260200182016040528015610be9578160200160208202803683370190505b5090505f5b86811015610ce0575f888883818110610c0957610c096122d4565b905060200201359050610c1d8a338361177e565b610c3d57604051630e35d34560e11b8152600481018290526024016106cf565b5f610c488b83611752565b5f818152600560205260409020549091506001600160a01b03168015610c845760405163391fac8f60e21b8152600481018490526024016106cf565b5f82815260056020526040902080546001600160a01b0319166001600160a01b038f1617905584518390869088908110610cc057610cc06122d4565b602002602001018181525050856001019550505050806001019050610bee565b508115610dc4575f826001600160401b03811115610d0057610d006122e8565b604051908082528060200260200182016040528015610d29578160200160208202803683370190505b5090505f5b83811015610d7557828181518110610d4857610d486122d4565b6020026020010151828281518110610d6257610d626122d4565b6020908102919091010152600101610d2e565b50888a6001600160a01b0316336001600160a01b03167f3fe8c5ff8038f409c0e155c58dd77a1d041dc9654f80d372adac435fb5837c3084604051610dba91906121a8565b60405180910390a4505b50945094509450949050565b5f5b83811015610ea9575f868281518110610ded57610ded6122d4565b602002602001015190505f610e038585846118a0565b90505f198103610e315760405163e0a76e8560e01b81526001600160a01b03831660048201526024016106cf565b610e9f82888581518110610e4757610e476122d4565b6020026020010151610e5890612328565b878785818110610e6a57610e6a6122d4565b9050602002810190610e7c9190612342565b610e8d906040810190602001612360565b888886818110610a8c57610a8c6122d4565b5050600101610dd2565b505050505050565b831561104e575f5f851315610ef5576001600160581b03808516860190811115610eee57604051633643f37960e21b815260040160405180910390fd5b9050610f39565b5f610eff86612328565b9050846001600160581b0316811115610f2b57604051637b1304a960e11b815260040160405180910390fd5b6001600160581b0385160390505b5f610f44878661182a565b90505f610f51888461182a565b90505f51602061256f5f395f51905f5282101580610f7c57505f51602061256f5f395f51905f528110155b15610f9a57604051633643f37960e21b815260040160405180910390fd5b6001600160581b038616158015610fb957505f836001600160581b0316115b15610fcf57610fc9600182611904565b50610ffc565b826001600160581b03165f03610fec57610fc96001838787611ac3565b610ffa600183838888611ada565b505b604080516001600160581b038089168252851660208201526001600160a01b038a16917fee82339564ef9f72eccdbb67b46a62198422524ab9c7e3fcbdd194fa1b46461b910160405180910390a25050505b5050505050565b6002545f9081526003602052604090205480611072600682611f60565b5f81815260086020908152604091829020805467ffffffffffffffff1916436001600160401b03811691909117909155915191825283917fac84e1f746682c16ccc7cac6060f24ba0d81b110e6dc4cfa95bbfae24a5fc07d910160405180910390a25050565b6060805f80846001600160401b038111156110f5576110f56122e8565b60405190808252806020026020018201604052801561111e578160200160208202803683370190505b509350846001600160401b03811115611139576111396122e8565b604051908082528060200260200182016040528015611162578160200160208202803683370190505b5092505f856001600160401b0381111561117e5761117e6122e8565b6040519080825280602002602001820160405280156111b157816020015b606081526020019060019003908161119c5790505b5090505f866001600160401b038111156111cd576111cd6122e8565b6040519080825280602002602001820160405280156111f6578160200160208202803683370190505b5090505f5b8781101561126a57876001600160401b0381111561121b5761121b6122e8565b604051908082528060200260200182016040528015611244578160200160208202803683370190505b50838281518110611257576112576122d4565b60209081029190910101526001016111fb565b505f5b8781101561148d575f898983818110611288576112886122d4565b90506020020135905061129c8b338361177e565b6112bc57604051630e35d34560e11b8152600481018290526024016106cf565b5f6112c78c83611752565b5f818152600560205260409020549091506001600160a01b03908116908e1681036112f457505050611485565b6001600160a01b03811615611427575f61130f8b8a84611849565b90505f1981036113af57818b8a8151811061132c5761132c6122d4565b60200260200101906001600160a01b031690816001600160a01b03168152505083878a8151811061135f5761135f6122d4565b60200260200101515f81518110611378576113786122d4565b60200260200101818152505060018a8a81518110611398576113986122d4565b602002602001018181525050886001019850611425565b838782815181106113c2576113c26122d4565b60200260200101518b83815181106113dc576113dc6122d4565b6020026020010151815181106113f4576113f46122d4565b602002602001018181525050898181518110611412576114126122d4565b6020026020010180516001019081815250505b505b8d60055f8481526020019081526020015f205f6101000a8154816001600160a01b0302191690836001600160a01b031602179055508285888151811061146f5761146f6122d4565b6020026020010181815250508660010196505050505b60010161126d565b505f5b848110156115e0575f8682815181106114ab576114ab6122d4565b60200260200101516001600160401b038111156114ca576114ca6122e8565b6040519080825280602002602001820160405280156114f3578160200160208202803683370190505b5090505f5b87838151811061150a5761150a6122d4565b60200260200101518110156115715784838151811061152b5761152b6122d4565b60200260200101518181518110611544576115446122d4565b602002602001015182828151811061155e5761155e6122d4565b60209081029190910101526001016114f8565b508a888381518110611585576115856122d4565b60200260200101516001600160a01b0316336001600160a01b03167f56017da320cb00880eb511a7183d19ed30ca4f9bcf6bf1dffa02ccb76da33915846040516115cf91906121a8565b60405180910390a450600101611490565b5082156116c4575f836001600160401b03811115611600576116006122e8565b604051908082528060200260200182016040528015611629578160200160208202803683370190505b5090505f5b8481101561167557828181518110611648576116486122d4565b6020026020010151828281518110611662576116626122d4565b602090810291909101015260010161162e565b50898b6001600160a01b0316336001600160a01b03167f3fe8c5ff8038f409c0e155c58dd77a1d041dc9654f80d372adac435fb5837c30846040516116ba91906121a8565b60405180910390a4505b5050945094509450949050565b5f5b83811015610ea9575f8682815181106116ee576116ee6122d4565b602002602001015190505f6117048585846118a0565b90505f1981036117325760405163e0a76e8560e01b81526001600160a01b03831660048201526024016106cf565b61174882888581518110610e4757610e476122d4565b50506001016116d3565b604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b5f5f5f8581548110611792576117926122d4565b5f9182526020918290206040805193840181529101546001600160a01b0390811680845291516331a9108f60e11b815260048101879052929350861691636352211e90602401602060405180830381865afa1580156117f3573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061181791906123be565b6001600160a01b03161495945050505050565b6001600160581b031660589190911b600160581b600160f81b03161790565b5f805b8381101561189557826001600160a01b0316858281518110611870576118706122d4565b60200260200101516001600160a01b03160361188d57905061043a565b60010161184c565b505f19949350505050565b5f805b8381101561189557826001600160a01b03168585838181106118c7576118c76122d4565b90506020028101906118d99190612342565b6118e79060208101906123d9565b6001600160a01b0316036118fc57905061043a565b6001016118a3565b5f5f51602061256f5f395f51905f528210611932576040516361c0541760e11b815260040160405180910390fd5b815f03611952576040516314b48df160e11b815260040160405180910390fd5b5f82815260038401602052604090205415611980576040516312c50cad60e11b815260040160405180910390fd5b8254600180850154906119949083906123f4565b61199f8260026124ea565b10156119b1576119ae81612310565b90505b60018501819055835f5b82811015611a89578084901c600116600103611a6e576040805180820182525f83815260028a0160209081529083902054825281018490529051632b0aac7f60e11b815273__$a2daaad8940c9006af3f1557205ebe532d$__9163561558fe91611a2891906004016124f5565b602060405180830381865af4158015611a43573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611a679190612525565b9150611a81565b5f81815260028801602052604090208290555b6001016119bb565b50611a9383612310565b8087555f928352600287016020908152604080852084905596845260039097019096529390209390935550919050565b5f611ad185855f8686611ada565b95945050505050565b5f5f51602061256f5f395f51905f528410611b08576040516361c0541760e11b815260040160405180910390fd5b5f858152600387016020526040902054611b3557604051631c811d5b60e21b815260040160405180910390fd5b5f84815260038701602052604090205415611b63576040516312c50cad60e11b815260040160405180910390fd5b5f611b6e8787611f98565b8754909150859087905f90611b859060019061253c565b60018b01549091505f90815b81811015611edb578087901c600116600103611d3f575f51602061256f5f395f51905f528a8a85818110611bc757611bc76122d4565b9050602002013510611bec576040516361c0541760e11b815260040160405180910390fd5b73__$a2daaad8940c9006af3f1557205ebe532d$__63561558fe60405180604001604052808d8d88818110611c2357611c236122d4565b905060200201358152602001898152506040518263ffffffff1660e01b8152600401611c4f91906124f5565b602060405180830381865af4158015611c6a573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611c8e9190612525565b955073__$a2daaad8940c9006af3f1557205ebe532d$__63561558fe60405180604001604052808d8d88818110611cc757611cc76122d4565b905060200201358152602001888152506040518263ffffffff1660e01b8152600401611cf391906124f5565b602060405180830381865af4158015611d0e573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611d329190612525565b9450826001019250611ed3565b86811c84821c14611ec0575f51602061256f5f395f51905f528a8a85818110611d6a57611d6a6122d4565b9050602002013510611d8f576040516361c0541760e11b815260040160405180910390fd5b5f81815260028e016020526040902054859003611db9575f81815260028e01602052604090208690555b73__$a2daaad8940c9006af3f1557205ebe532d$__63561558fe60405180604001604052808981526020018d8d88818110611df657611df66122d4565b905060200201358152506040518263ffffffff1660e01b8152600401611e1c91906124f5565b602060405180830381865af4158015611e37573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611e5b9190612525565b955073__$a2daaad8940c9006af3f1557205ebe532d$__63561558fe60405180604001604052808881526020018d8d88818110611e9a57611e9a6122d4565b905060200201358152506040518263ffffffff1660e01b8152600401611cf391906124f5565b5f81815260028e01602052604090208690555b600101611b91565b5060018c01545f90815260028d0160205260409020548414611f1057604051631fd4986360e11b815260040160405180910390fd5b5f81815260028d01602052604090208590558915611f40575f8b815260038d016020526040808220548c83529120555b5050505f88815260038a0160205260408120555091505095945050505050565b81545f908382611f6f83612310565b909155506001840180549192508390611f9190611f8c848661254f565b611fe3565b5550505050565b5f8181526003830160205260408120548103611fc757604051631c811d5b60e21b815260040160405180910390fd5b5f82815260038401602052604090205461044c9060019061253c565b5f82612002611fff84611ffb845f9081526020902090565b0190565b90565b949350505050565b6001600160a01b0381168114610b17575f5ffd5b5f5f83601f84011261202e575f5ffd5b5081356001600160401b03811115612044575f5ffd5b6020830191508360208260051b850101111561205e575f5ffd5b9250929050565b80356001600160581b038116811461207b575f5ffd5b919050565b5f5f5f5f5f5f5f5f5f60c08a8c031215612098575f5ffd5b89356120a38161200a565b985060208a0135975060408a01356001600160401b038111156120c4575f5ffd5b6120d08c828d0161201e565b90985096506120e3905060608b01612065565b945060808a01356001600160401b038111156120fd575f5ffd5b6121098c828d0161201e565b90955093505060a08a01356001600160401b03811115612127575f5ffd5b6121338c828d0161201e565b915080935050809150509295985092959850929598565b5f6020828403121561215a575f5ffd5b5035919050565b5f5f5f60408486031215612173575f5ffd5b8335925060208401356001600160401b0381111561218f575f5ffd5b61219b8682870161201e565b9497909650939450505050565b602080825282518282018190525f918401906040840190835b818110156121df5783518352602093840193909201916001016121c1565b509095945050505050565b5f5f604083850312156121fb575f5ffd5b82356122068161200a565b915061221460208401612065565b90509250929050565b602080825282518282018190525f918401906040840190835b818110156121df5783516001600160a01b0316835260209384019390920191600101612236565b5f5f5f5f5f60608688031215612271575f5ffd5b8535945060208601356001600160401b0381111561228d575f5ffd5b6122998882890161201e565b90955093505060408601356001600160401b038111156122b7575f5ffd5b6122c38882890161201e565b969995985093965092949392505050565b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52604160045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b5f60018201612321576123216122fc565b5060010190565b5f600160ff1b820161233c5761233c6122fc565b505f0390565b5f8235605e19833603018112612356575f5ffd5b9190910192915050565b5f60208284031215612370575f5ffd5b61044c82612065565b5f5f8335601e1984360301811261238e575f5ffd5b8301803591506001600160401b038211156123a7575f5ffd5b6020019150600581901b360382131561205e575f5ffd5b5f602082840312156123ce575f5ffd5b815161043a8161200a565b5f602082840312156123e9575f5ffd5b813561043a8161200a565b8082018082111561044f5761044f6122fc565b6001815b600184111561244257808504811115612426576124266122fc565b600184161561243457908102905b60019390931c92800261240b565b935093915050565b5f826124585750600161044f565b8161246457505f61044f565b816001811461247a5760028114612484576124a0565b600191505061044f565b60ff841115612495576124956122fc565b50506001821b61044f565b5060208310610133831016604e8410600b84101617156124c3575081810a61044f565b6124cf5f198484612407565b805f19048211156124e2576124e26122fc565b029392505050565b5f61044c838361244a565b6040810181835f5b600281101561251c5781518352602092830192909101906001016124fd565b50505092915050565b5f60208284031215612535575f5ffd5b5051919050565b8181038181111561044f5761044f6122fc565b5f8261256957634e487b7160e01b5f52601260045260245ffd5b50069056fe30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001a2646970667358221220623bbe902800220f99f14aa2b6a5c6a9e66d6557a2d4c6128d792e2ce7be02a264736f6c634300081e0033",
}

// DavinciDaoABI is the input ABI used to generate the binding from.
// Deprecated: Use DavinciDaoMetaData.ABI instead.
var DavinciDaoABI = DavinciDaoMetaData.ABI

// DavinciDaoBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use DavinciDaoMetaData.Bin instead.
var DavinciDaoBin = DavinciDaoMetaData.Bin

// DeployDavinciDao deploys a new Ethereum contract, binding an instance of DavinciDao to it.
func DeployDavinciDao(auth *bind.TransactOpts, backend bind.ContractBackend, tokens []common.Address) (common.Address, *types.Transaction, *DavinciDao, error) {
	parsed, err := DavinciDaoMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(DavinciDaoBin), backend, tokens)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &DavinciDao{DavinciDaoCaller: DavinciDaoCaller{contract: contract}, DavinciDaoTransactor: DavinciDaoTransactor{contract: contract}, DavinciDaoFilterer: DavinciDaoFilterer{contract: contract}}, nil
}

// DavinciDao is an auto generated Go binding around an Ethereum contract.
type DavinciDao struct {
	DavinciDaoCaller     // Read-only binding to the contract
	DavinciDaoTransactor // Write-only binding to the contract
	DavinciDaoFilterer   // Log filterer for contract events
}

// DavinciDaoCaller is an auto generated read-only Go binding around an Ethereum contract.
type DavinciDaoCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DavinciDaoTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DavinciDaoTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DavinciDaoFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DavinciDaoFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DavinciDaoSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DavinciDaoSession struct {
	Contract     *DavinciDao       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DavinciDaoCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DavinciDaoCallerSession struct {
	Contract *DavinciDaoCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// DavinciDaoTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DavinciDaoTransactorSession struct {
	Contract     *DavinciDaoTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// DavinciDaoRaw is an auto generated low-level Go binding around an Ethereum contract.
type DavinciDaoRaw struct {
	Contract *DavinciDao // Generic contract binding to access the raw methods on
}

// DavinciDaoCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DavinciDaoCallerRaw struct {
	Contract *DavinciDaoCaller // Generic read-only contract binding to access the raw methods on
}

// DavinciDaoTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DavinciDaoTransactorRaw struct {
	Contract *DavinciDaoTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDavinciDao creates a new instance of DavinciDao, bound to a specific deployed contract.
func NewDavinciDao(address common.Address, backend bind.ContractBackend) (*DavinciDao, error) {
	contract, err := bindDavinciDao(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &DavinciDao{DavinciDaoCaller: DavinciDaoCaller{contract: contract}, DavinciDaoTransactor: DavinciDaoTransactor{contract: contract}, DavinciDaoFilterer: DavinciDaoFilterer{contract: contract}}, nil
}

// NewDavinciDaoCaller creates a new read-only instance of DavinciDao, bound to a specific deployed contract.
func NewDavinciDaoCaller(address common.Address, caller bind.ContractCaller) (*DavinciDaoCaller, error) {
	contract, err := bindDavinciDao(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DavinciDaoCaller{contract: contract}, nil
}

// NewDavinciDaoTransactor creates a new write-only instance of DavinciDao, bound to a specific deployed contract.
func NewDavinciDaoTransactor(address common.Address, transactor bind.ContractTransactor) (*DavinciDaoTransactor, error) {
	contract, err := bindDavinciDao(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DavinciDaoTransactor{contract: contract}, nil
}

// NewDavinciDaoFilterer creates a new log filterer instance of DavinciDao, bound to a specific deployed contract.
func NewDavinciDaoFilterer(address common.Address, filterer bind.ContractFilterer) (*DavinciDaoFilterer, error) {
	contract, err := bindDavinciDao(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DavinciDaoFilterer{contract: contract}, nil
}

// bindDavinciDao binds a generic wrapper to an already deployed contract.
func bindDavinciDao(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := DavinciDaoMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DavinciDao *DavinciDaoRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DavinciDao.Contract.DavinciDaoCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DavinciDao *DavinciDaoRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DavinciDao.Contract.DavinciDaoTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DavinciDao *DavinciDaoRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DavinciDao.Contract.DavinciDaoTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DavinciDao *DavinciDaoCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DavinciDao.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DavinciDao *DavinciDaoTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DavinciDao.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DavinciDao *DavinciDaoTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DavinciDao.Contract.contract.Transact(opts, method, params...)
}

// Collections is a free data retrieval call binding the contract method 0xfdbda0ec.
//
// Solidity: function collections(uint256 ) view returns(address token)
func (_DavinciDao *DavinciDaoCaller) Collections(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _DavinciDao.contract.Call(opts, &out, "collections", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Collections is a free data retrieval call binding the contract method 0xfdbda0ec.
//
// Solidity: function collections(uint256 ) view returns(address token)
func (_DavinciDao *DavinciDaoSession) Collections(arg0 *big.Int) (common.Address, error) {
	return _DavinciDao.Contract.Collections(&_DavinciDao.CallOpts, arg0)
}

// Collections is a free data retrieval call binding the contract method 0xfdbda0ec.
//
// Solidity: function collections(uint256 ) view returns(address token)
func (_DavinciDao *DavinciDaoCallerSession) Collections(arg0 *big.Int) (common.Address, error) {
	return _DavinciDao.Contract.Collections(&_DavinciDao.CallOpts, arg0)
}

// ComputeLeafWithWeight is a free data retrieval call binding the contract method 0x89e8a255.
//
// Solidity: function computeLeafWithWeight(address account, uint88 weight) pure returns(uint256)
func (_DavinciDao *DavinciDaoCaller) ComputeLeafWithWeight(opts *bind.CallOpts, account common.Address, weight *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _DavinciDao.contract.Call(opts, &out, "computeLeafWithWeight", account, weight)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ComputeLeafWithWeight is a free data retrieval call binding the contract method 0x89e8a255.
//
// Solidity: function computeLeafWithWeight(address account, uint88 weight) pure returns(uint256)
func (_DavinciDao *DavinciDaoSession) ComputeLeafWithWeight(account common.Address, weight *big.Int) (*big.Int, error) {
	return _DavinciDao.Contract.ComputeLeafWithWeight(&_DavinciDao.CallOpts, account, weight)
}

// ComputeLeafWithWeight is a free data retrieval call binding the contract method 0x89e8a255.
//
// Solidity: function computeLeafWithWeight(address account, uint88 weight) pure returns(uint256)
func (_DavinciDao *DavinciDaoCallerSession) ComputeLeafWithWeight(account common.Address, weight *big.Int) (*big.Int, error) {
	return _DavinciDao.Contract.ComputeLeafWithWeight(&_DavinciDao.CallOpts, account, weight)
}

// GetCensusRoot is a free data retrieval call binding the contract method 0xc1da8691.
//
// Solidity: function getCensusRoot() view returns(uint256)
func (_DavinciDao *DavinciDaoCaller) GetCensusRoot(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DavinciDao.contract.Call(opts, &out, "getCensusRoot")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCensusRoot is a free data retrieval call binding the contract method 0xc1da8691.
//
// Solidity: function getCensusRoot() view returns(uint256)
func (_DavinciDao *DavinciDaoSession) GetCensusRoot() (*big.Int, error) {
	return _DavinciDao.Contract.GetCensusRoot(&_DavinciDao.CallOpts)
}

// GetCensusRoot is a free data retrieval call binding the contract method 0xc1da8691.
//
// Solidity: function getCensusRoot() view returns(uint256)
func (_DavinciDao *DavinciDaoCallerSession) GetCensusRoot() (*big.Int, error) {
	return _DavinciDao.Contract.GetCensusRoot(&_DavinciDao.CallOpts)
}

// GetNFTids is a free data retrieval call binding the contract method 0x8498be04.
//
// Solidity: function getNFTids(uint256 nftIndex, uint256[] candidateIds) view returns(uint256[])
func (_DavinciDao *DavinciDaoCaller) GetNFTids(opts *bind.CallOpts, nftIndex *big.Int, candidateIds []*big.Int) ([]*big.Int, error) {
	var out []interface{}
	err := _DavinciDao.contract.Call(opts, &out, "getNFTids", nftIndex, candidateIds)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// GetNFTids is a free data retrieval call binding the contract method 0x8498be04.
//
// Solidity: function getNFTids(uint256 nftIndex, uint256[] candidateIds) view returns(uint256[])
func (_DavinciDao *DavinciDaoSession) GetNFTids(nftIndex *big.Int, candidateIds []*big.Int) ([]*big.Int, error) {
	return _DavinciDao.Contract.GetNFTids(&_DavinciDao.CallOpts, nftIndex, candidateIds)
}

// GetNFTids is a free data retrieval call binding the contract method 0x8498be04.
//
// Solidity: function getNFTids(uint256 nftIndex, uint256[] candidateIds) view returns(uint256[])
func (_DavinciDao *DavinciDaoCallerSession) GetNFTids(nftIndex *big.Int, candidateIds []*big.Int) ([]*big.Int, error) {
	return _DavinciDao.Contract.GetNFTids(&_DavinciDao.CallOpts, nftIndex, candidateIds)
}

// GetRootBlockNumber is a free data retrieval call binding the contract method 0x650e5fcf.
//
// Solidity: function getRootBlockNumber(uint256 root) view returns(uint256)
func (_DavinciDao *DavinciDaoCaller) GetRootBlockNumber(opts *bind.CallOpts, root *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _DavinciDao.contract.Call(opts, &out, "getRootBlockNumber", root)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRootBlockNumber is a free data retrieval call binding the contract method 0x650e5fcf.
//
// Solidity: function getRootBlockNumber(uint256 root) view returns(uint256)
func (_DavinciDao *DavinciDaoSession) GetRootBlockNumber(root *big.Int) (*big.Int, error) {
	return _DavinciDao.Contract.GetRootBlockNumber(&_DavinciDao.CallOpts, root)
}

// GetRootBlockNumber is a free data retrieval call binding the contract method 0x650e5fcf.
//
// Solidity: function getRootBlockNumber(uint256 root) view returns(uint256)
func (_DavinciDao *DavinciDaoCallerSession) GetRootBlockNumber(root *big.Int) (*big.Int, error) {
	return _DavinciDao.Contract.GetRootBlockNumber(&_DavinciDao.CallOpts, root)
}

// GetTokenDelegations is a free data retrieval call binding the contract method 0xc333b0f1.
//
// Solidity: function getTokenDelegations(uint256 nftIndex, uint256[] ids) view returns(address[] delegates)
func (_DavinciDao *DavinciDaoCaller) GetTokenDelegations(opts *bind.CallOpts, nftIndex *big.Int, ids []*big.Int) ([]common.Address, error) {
	var out []interface{}
	err := _DavinciDao.contract.Call(opts, &out, "getTokenDelegations", nftIndex, ids)

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetTokenDelegations is a free data retrieval call binding the contract method 0xc333b0f1.
//
// Solidity: function getTokenDelegations(uint256 nftIndex, uint256[] ids) view returns(address[] delegates)
func (_DavinciDao *DavinciDaoSession) GetTokenDelegations(nftIndex *big.Int, ids []*big.Int) ([]common.Address, error) {
	return _DavinciDao.Contract.GetTokenDelegations(&_DavinciDao.CallOpts, nftIndex, ids)
}

// GetTokenDelegations is a free data retrieval call binding the contract method 0xc333b0f1.
//
// Solidity: function getTokenDelegations(uint256 nftIndex, uint256[] ids) view returns(address[] delegates)
func (_DavinciDao *DavinciDaoCallerSession) GetTokenDelegations(nftIndex *big.Int, ids []*big.Int) ([]common.Address, error) {
	return _DavinciDao.Contract.GetTokenDelegations(&_DavinciDao.CallOpts, nftIndex, ids)
}

// TokenDelegate is a free data retrieval call binding the contract method 0x66e12bef.
//
// Solidity: function tokenDelegate(bytes32 ) view returns(address)
func (_DavinciDao *DavinciDaoCaller) TokenDelegate(opts *bind.CallOpts, arg0 [32]byte) (common.Address, error) {
	var out []interface{}
	err := _DavinciDao.contract.Call(opts, &out, "tokenDelegate", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// TokenDelegate is a free data retrieval call binding the contract method 0x66e12bef.
//
// Solidity: function tokenDelegate(bytes32 ) view returns(address)
func (_DavinciDao *DavinciDaoSession) TokenDelegate(arg0 [32]byte) (common.Address, error) {
	return _DavinciDao.Contract.TokenDelegate(&_DavinciDao.CallOpts, arg0)
}

// TokenDelegate is a free data retrieval call binding the contract method 0x66e12bef.
//
// Solidity: function tokenDelegate(bytes32 ) view returns(address)
func (_DavinciDao *DavinciDaoCallerSession) TokenDelegate(arg0 [32]byte) (common.Address, error) {
	return _DavinciDao.Contract.TokenDelegate(&_DavinciDao.CallOpts, arg0)
}

// Delegate is a paid mutator transaction binding the contract method 0x340ae1cd.
//
// Solidity: function delegate(address to, uint256 nftIndex, uint256[] ids, uint88 currentWeightOfTo, uint256[] toProof, (address,uint88,uint256[])[] fromProofs) returns()
func (_DavinciDao *DavinciDaoTransactor) Delegate(opts *bind.TransactOpts, to common.Address, nftIndex *big.Int, ids []*big.Int, currentWeightOfTo *big.Int, toProof []*big.Int, fromProofs []DavinciDaoProofInput) (*types.Transaction, error) {
	return _DavinciDao.contract.Transact(opts, "delegate", to, nftIndex, ids, currentWeightOfTo, toProof, fromProofs)
}

// Delegate is a paid mutator transaction binding the contract method 0x340ae1cd.
//
// Solidity: function delegate(address to, uint256 nftIndex, uint256[] ids, uint88 currentWeightOfTo, uint256[] toProof, (address,uint88,uint256[])[] fromProofs) returns()
func (_DavinciDao *DavinciDaoSession) Delegate(to common.Address, nftIndex *big.Int, ids []*big.Int, currentWeightOfTo *big.Int, toProof []*big.Int, fromProofs []DavinciDaoProofInput) (*types.Transaction, error) {
	return _DavinciDao.Contract.Delegate(&_DavinciDao.TransactOpts, to, nftIndex, ids, currentWeightOfTo, toProof, fromProofs)
}

// Delegate is a paid mutator transaction binding the contract method 0x340ae1cd.
//
// Solidity: function delegate(address to, uint256 nftIndex, uint256[] ids, uint88 currentWeightOfTo, uint256[] toProof, (address,uint88,uint256[])[] fromProofs) returns()
func (_DavinciDao *DavinciDaoTransactorSession) Delegate(to common.Address, nftIndex *big.Int, ids []*big.Int, currentWeightOfTo *big.Int, toProof []*big.Int, fromProofs []DavinciDaoProofInput) (*types.Transaction, error) {
	return _DavinciDao.Contract.Delegate(&_DavinciDao.TransactOpts, to, nftIndex, ids, currentWeightOfTo, toProof, fromProofs)
}

// Undelegate is a paid mutator transaction binding the contract method 0xe2bc69f4.
//
// Solidity: function undelegate(uint256 nftIndex, uint256[] ids, (address,uint88,uint256[])[] proofs) returns()
func (_DavinciDao *DavinciDaoTransactor) Undelegate(opts *bind.TransactOpts, nftIndex *big.Int, ids []*big.Int, proofs []DavinciDaoProofInput) (*types.Transaction, error) {
	return _DavinciDao.contract.Transact(opts, "undelegate", nftIndex, ids, proofs)
}

// Undelegate is a paid mutator transaction binding the contract method 0xe2bc69f4.
//
// Solidity: function undelegate(uint256 nftIndex, uint256[] ids, (address,uint88,uint256[])[] proofs) returns()
func (_DavinciDao *DavinciDaoSession) Undelegate(nftIndex *big.Int, ids []*big.Int, proofs []DavinciDaoProofInput) (*types.Transaction, error) {
	return _DavinciDao.Contract.Undelegate(&_DavinciDao.TransactOpts, nftIndex, ids, proofs)
}

// Undelegate is a paid mutator transaction binding the contract method 0xe2bc69f4.
//
// Solidity: function undelegate(uint256 nftIndex, uint256[] ids, (address,uint88,uint256[])[] proofs) returns()
func (_DavinciDao *DavinciDaoTransactorSession) Undelegate(nftIndex *big.Int, ids []*big.Int, proofs []DavinciDaoProofInput) (*types.Transaction, error) {
	return _DavinciDao.Contract.Undelegate(&_DavinciDao.TransactOpts, nftIndex, ids, proofs)
}

// UpdateDelegation is a paid mutator transaction binding the contract method 0x70e3afa2.
//
// Solidity: function updateDelegation(address to, uint256 nftIndex, uint256[] ids, uint88 currentWeightOfTo, (address,uint88,uint256[])[] fromProofs, uint256[] toProof) returns()
func (_DavinciDao *DavinciDaoTransactor) UpdateDelegation(opts *bind.TransactOpts, to common.Address, nftIndex *big.Int, ids []*big.Int, currentWeightOfTo *big.Int, fromProofs []DavinciDaoProofInput, toProof []*big.Int) (*types.Transaction, error) {
	return _DavinciDao.contract.Transact(opts, "updateDelegation", to, nftIndex, ids, currentWeightOfTo, fromProofs, toProof)
}

// UpdateDelegation is a paid mutator transaction binding the contract method 0x70e3afa2.
//
// Solidity: function updateDelegation(address to, uint256 nftIndex, uint256[] ids, uint88 currentWeightOfTo, (address,uint88,uint256[])[] fromProofs, uint256[] toProof) returns()
func (_DavinciDao *DavinciDaoSession) UpdateDelegation(to common.Address, nftIndex *big.Int, ids []*big.Int, currentWeightOfTo *big.Int, fromProofs []DavinciDaoProofInput, toProof []*big.Int) (*types.Transaction, error) {
	return _DavinciDao.Contract.UpdateDelegation(&_DavinciDao.TransactOpts, to, nftIndex, ids, currentWeightOfTo, fromProofs, toProof)
}

// UpdateDelegation is a paid mutator transaction binding the contract method 0x70e3afa2.
//
// Solidity: function updateDelegation(address to, uint256 nftIndex, uint256[] ids, uint88 currentWeightOfTo, (address,uint88,uint256[])[] fromProofs, uint256[] toProof) returns()
func (_DavinciDao *DavinciDaoTransactorSession) UpdateDelegation(to common.Address, nftIndex *big.Int, ids []*big.Int, currentWeightOfTo *big.Int, fromProofs []DavinciDaoProofInput, toProof []*big.Int) (*types.Transaction, error) {
	return _DavinciDao.Contract.UpdateDelegation(&_DavinciDao.TransactOpts, to, nftIndex, ids, currentWeightOfTo, fromProofs, toProof)
}

// DavinciDaoCensusRootUpdatedIterator is returned from FilterCensusRootUpdated and is used to iterate over the raw logs and unpacked data for CensusRootUpdated events raised by the DavinciDao contract.
type DavinciDaoCensusRootUpdatedIterator struct {
	Event *DavinciDaoCensusRootUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DavinciDaoCensusRootUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DavinciDaoCensusRootUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DavinciDaoCensusRootUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DavinciDaoCensusRootUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DavinciDaoCensusRootUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DavinciDaoCensusRootUpdated represents a CensusRootUpdated event raised by the DavinciDao contract.
type DavinciDaoCensusRootUpdated struct {
	NewRoot     *big.Int
	BlockNumber *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterCensusRootUpdated is a free log retrieval operation binding the contract event 0xac84e1f746682c16ccc7cac6060f24ba0d81b110e6dc4cfa95bbfae24a5fc07d.
//
// Solidity: event CensusRootUpdated(uint256 indexed newRoot, uint256 blockNumber)
func (_DavinciDao *DavinciDaoFilterer) FilterCensusRootUpdated(opts *bind.FilterOpts, newRoot []*big.Int) (*DavinciDaoCensusRootUpdatedIterator, error) {

	var newRootRule []interface{}
	for _, newRootItem := range newRoot {
		newRootRule = append(newRootRule, newRootItem)
	}

	logs, sub, err := _DavinciDao.contract.FilterLogs(opts, "CensusRootUpdated", newRootRule)
	if err != nil {
		return nil, err
	}
	return &DavinciDaoCensusRootUpdatedIterator{contract: _DavinciDao.contract, event: "CensusRootUpdated", logs: logs, sub: sub}, nil
}

// WatchCensusRootUpdated is a free log subscription operation binding the contract event 0xac84e1f746682c16ccc7cac6060f24ba0d81b110e6dc4cfa95bbfae24a5fc07d.
//
// Solidity: event CensusRootUpdated(uint256 indexed newRoot, uint256 blockNumber)
func (_DavinciDao *DavinciDaoFilterer) WatchCensusRootUpdated(opts *bind.WatchOpts, sink chan<- *DavinciDaoCensusRootUpdated, newRoot []*big.Int) (event.Subscription, error) {

	var newRootRule []interface{}
	for _, newRootItem := range newRoot {
		newRootRule = append(newRootRule, newRootItem)
	}

	logs, sub, err := _DavinciDao.contract.WatchLogs(opts, "CensusRootUpdated", newRootRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DavinciDaoCensusRootUpdated)
				if err := _DavinciDao.contract.UnpackLog(event, "CensusRootUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCensusRootUpdated is a log parse operation binding the contract event 0xac84e1f746682c16ccc7cac6060f24ba0d81b110e6dc4cfa95bbfae24a5fc07d.
//
// Solidity: event CensusRootUpdated(uint256 indexed newRoot, uint256 blockNumber)
func (_DavinciDao *DavinciDaoFilterer) ParseCensusRootUpdated(log types.Log) (*DavinciDaoCensusRootUpdated, error) {
	event := new(DavinciDaoCensusRootUpdated)
	if err := _DavinciDao.contract.UnpackLog(event, "CensusRootUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DavinciDaoDelegatedIterator is returned from FilterDelegated and is used to iterate over the raw logs and unpacked data for Delegated events raised by the DavinciDao contract.
type DavinciDaoDelegatedIterator struct {
	Event *DavinciDaoDelegated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DavinciDaoDelegatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DavinciDaoDelegated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DavinciDaoDelegated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DavinciDaoDelegatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DavinciDaoDelegatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DavinciDaoDelegated represents a Delegated event raised by the DavinciDao contract.
type DavinciDaoDelegated struct {
	Owner    common.Address
	To       common.Address
	NftIndex *big.Int
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterDelegated is a free log retrieval operation binding the contract event 0x24d7bda8602b916d64417f0dbfe2e2e88ec9b1157bd9f596dfdb91ba26624e04.
//
// Solidity: event Delegated(address indexed owner, address indexed to, uint256 indexed nftIndex, uint256 tokenId)
func (_DavinciDao *DavinciDaoFilterer) FilterDelegated(opts *bind.FilterOpts, owner []common.Address, to []common.Address, nftIndex []*big.Int) (*DavinciDaoDelegatedIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var nftIndexRule []interface{}
	for _, nftIndexItem := range nftIndex {
		nftIndexRule = append(nftIndexRule, nftIndexItem)
	}

	logs, sub, err := _DavinciDao.contract.FilterLogs(opts, "Delegated", ownerRule, toRule, nftIndexRule)
	if err != nil {
		return nil, err
	}
	return &DavinciDaoDelegatedIterator{contract: _DavinciDao.contract, event: "Delegated", logs: logs, sub: sub}, nil
}

// WatchDelegated is a free log subscription operation binding the contract event 0x24d7bda8602b916d64417f0dbfe2e2e88ec9b1157bd9f596dfdb91ba26624e04.
//
// Solidity: event Delegated(address indexed owner, address indexed to, uint256 indexed nftIndex, uint256 tokenId)
func (_DavinciDao *DavinciDaoFilterer) WatchDelegated(opts *bind.WatchOpts, sink chan<- *DavinciDaoDelegated, owner []common.Address, to []common.Address, nftIndex []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var nftIndexRule []interface{}
	for _, nftIndexItem := range nftIndex {
		nftIndexRule = append(nftIndexRule, nftIndexItem)
	}

	logs, sub, err := _DavinciDao.contract.WatchLogs(opts, "Delegated", ownerRule, toRule, nftIndexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DavinciDaoDelegated)
				if err := _DavinciDao.contract.UnpackLog(event, "Delegated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDelegated is a log parse operation binding the contract event 0x24d7bda8602b916d64417f0dbfe2e2e88ec9b1157bd9f596dfdb91ba26624e04.
//
// Solidity: event Delegated(address indexed owner, address indexed to, uint256 indexed nftIndex, uint256 tokenId)
func (_DavinciDao *DavinciDaoFilterer) ParseDelegated(log types.Log) (*DavinciDaoDelegated, error) {
	event := new(DavinciDaoDelegated)
	if err := _DavinciDao.contract.UnpackLog(event, "Delegated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DavinciDaoDelegatedBatchIterator is returned from FilterDelegatedBatch and is used to iterate over the raw logs and unpacked data for DelegatedBatch events raised by the DavinciDao contract.
type DavinciDaoDelegatedBatchIterator struct {
	Event *DavinciDaoDelegatedBatch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DavinciDaoDelegatedBatchIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DavinciDaoDelegatedBatch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DavinciDaoDelegatedBatch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DavinciDaoDelegatedBatchIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DavinciDaoDelegatedBatchIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DavinciDaoDelegatedBatch represents a DelegatedBatch event raised by the DavinciDao contract.
type DavinciDaoDelegatedBatch struct {
	Owner    common.Address
	To       common.Address
	NftIndex *big.Int
	TokenIds []*big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterDelegatedBatch is a free log retrieval operation binding the contract event 0x3fe8c5ff8038f409c0e155c58dd77a1d041dc9654f80d372adac435fb5837c30.
//
// Solidity: event DelegatedBatch(address indexed owner, address indexed to, uint256 indexed nftIndex, uint256[] tokenIds)
func (_DavinciDao *DavinciDaoFilterer) FilterDelegatedBatch(opts *bind.FilterOpts, owner []common.Address, to []common.Address, nftIndex []*big.Int) (*DavinciDaoDelegatedBatchIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var nftIndexRule []interface{}
	for _, nftIndexItem := range nftIndex {
		nftIndexRule = append(nftIndexRule, nftIndexItem)
	}

	logs, sub, err := _DavinciDao.contract.FilterLogs(opts, "DelegatedBatch", ownerRule, toRule, nftIndexRule)
	if err != nil {
		return nil, err
	}
	return &DavinciDaoDelegatedBatchIterator{contract: _DavinciDao.contract, event: "DelegatedBatch", logs: logs, sub: sub}, nil
}

// WatchDelegatedBatch is a free log subscription operation binding the contract event 0x3fe8c5ff8038f409c0e155c58dd77a1d041dc9654f80d372adac435fb5837c30.
//
// Solidity: event DelegatedBatch(address indexed owner, address indexed to, uint256 indexed nftIndex, uint256[] tokenIds)
func (_DavinciDao *DavinciDaoFilterer) WatchDelegatedBatch(opts *bind.WatchOpts, sink chan<- *DavinciDaoDelegatedBatch, owner []common.Address, to []common.Address, nftIndex []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var nftIndexRule []interface{}
	for _, nftIndexItem := range nftIndex {
		nftIndexRule = append(nftIndexRule, nftIndexItem)
	}

	logs, sub, err := _DavinciDao.contract.WatchLogs(opts, "DelegatedBatch", ownerRule, toRule, nftIndexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DavinciDaoDelegatedBatch)
				if err := _DavinciDao.contract.UnpackLog(event, "DelegatedBatch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDelegatedBatch is a log parse operation binding the contract event 0x3fe8c5ff8038f409c0e155c58dd77a1d041dc9654f80d372adac435fb5837c30.
//
// Solidity: event DelegatedBatch(address indexed owner, address indexed to, uint256 indexed nftIndex, uint256[] tokenIds)
func (_DavinciDao *DavinciDaoFilterer) ParseDelegatedBatch(log types.Log) (*DavinciDaoDelegatedBatch, error) {
	event := new(DavinciDaoDelegatedBatch)
	if err := _DavinciDao.contract.UnpackLog(event, "DelegatedBatch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DavinciDaoUndelegatedIterator is returned from FilterUndelegated and is used to iterate over the raw logs and unpacked data for Undelegated events raised by the DavinciDao contract.
type DavinciDaoUndelegatedIterator struct {
	Event *DavinciDaoUndelegated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DavinciDaoUndelegatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DavinciDaoUndelegated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DavinciDaoUndelegated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DavinciDaoUndelegatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DavinciDaoUndelegatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DavinciDaoUndelegated represents a Undelegated event raised by the DavinciDao contract.
type DavinciDaoUndelegated struct {
	Owner    common.Address
	From     common.Address
	NftIndex *big.Int
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterUndelegated is a free log retrieval operation binding the contract event 0x3aace7340547de7b9156593a7652dc07ee900cea3fd8f82cb6c9d38b40829802.
//
// Solidity: event Undelegated(address indexed owner, address indexed from, uint256 indexed nftIndex, uint256 tokenId)
func (_DavinciDao *DavinciDaoFilterer) FilterUndelegated(opts *bind.FilterOpts, owner []common.Address, from []common.Address, nftIndex []*big.Int) (*DavinciDaoUndelegatedIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var nftIndexRule []interface{}
	for _, nftIndexItem := range nftIndex {
		nftIndexRule = append(nftIndexRule, nftIndexItem)
	}

	logs, sub, err := _DavinciDao.contract.FilterLogs(opts, "Undelegated", ownerRule, fromRule, nftIndexRule)
	if err != nil {
		return nil, err
	}
	return &DavinciDaoUndelegatedIterator{contract: _DavinciDao.contract, event: "Undelegated", logs: logs, sub: sub}, nil
}

// WatchUndelegated is a free log subscription operation binding the contract event 0x3aace7340547de7b9156593a7652dc07ee900cea3fd8f82cb6c9d38b40829802.
//
// Solidity: event Undelegated(address indexed owner, address indexed from, uint256 indexed nftIndex, uint256 tokenId)
func (_DavinciDao *DavinciDaoFilterer) WatchUndelegated(opts *bind.WatchOpts, sink chan<- *DavinciDaoUndelegated, owner []common.Address, from []common.Address, nftIndex []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var nftIndexRule []interface{}
	for _, nftIndexItem := range nftIndex {
		nftIndexRule = append(nftIndexRule, nftIndexItem)
	}

	logs, sub, err := _DavinciDao.contract.WatchLogs(opts, "Undelegated", ownerRule, fromRule, nftIndexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DavinciDaoUndelegated)
				if err := _DavinciDao.contract.UnpackLog(event, "Undelegated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUndelegated is a log parse operation binding the contract event 0x3aace7340547de7b9156593a7652dc07ee900cea3fd8f82cb6c9d38b40829802.
//
// Solidity: event Undelegated(address indexed owner, address indexed from, uint256 indexed nftIndex, uint256 tokenId)
func (_DavinciDao *DavinciDaoFilterer) ParseUndelegated(log types.Log) (*DavinciDaoUndelegated, error) {
	event := new(DavinciDaoUndelegated)
	if err := _DavinciDao.contract.UnpackLog(event, "Undelegated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DavinciDaoUndelegatedBatchIterator is returned from FilterUndelegatedBatch and is used to iterate over the raw logs and unpacked data for UndelegatedBatch events raised by the DavinciDao contract.
type DavinciDaoUndelegatedBatchIterator struct {
	Event *DavinciDaoUndelegatedBatch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DavinciDaoUndelegatedBatchIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DavinciDaoUndelegatedBatch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DavinciDaoUndelegatedBatch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DavinciDaoUndelegatedBatchIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DavinciDaoUndelegatedBatchIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DavinciDaoUndelegatedBatch represents a UndelegatedBatch event raised by the DavinciDao contract.
type DavinciDaoUndelegatedBatch struct {
	Owner    common.Address
	From     common.Address
	NftIndex *big.Int
	TokenIds []*big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterUndelegatedBatch is a free log retrieval operation binding the contract event 0x56017da320cb00880eb511a7183d19ed30ca4f9bcf6bf1dffa02ccb76da33915.
//
// Solidity: event UndelegatedBatch(address indexed owner, address indexed from, uint256 indexed nftIndex, uint256[] tokenIds)
func (_DavinciDao *DavinciDaoFilterer) FilterUndelegatedBatch(opts *bind.FilterOpts, owner []common.Address, from []common.Address, nftIndex []*big.Int) (*DavinciDaoUndelegatedBatchIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var nftIndexRule []interface{}
	for _, nftIndexItem := range nftIndex {
		nftIndexRule = append(nftIndexRule, nftIndexItem)
	}

	logs, sub, err := _DavinciDao.contract.FilterLogs(opts, "UndelegatedBatch", ownerRule, fromRule, nftIndexRule)
	if err != nil {
		return nil, err
	}
	return &DavinciDaoUndelegatedBatchIterator{contract: _DavinciDao.contract, event: "UndelegatedBatch", logs: logs, sub: sub}, nil
}

// WatchUndelegatedBatch is a free log subscription operation binding the contract event 0x56017da320cb00880eb511a7183d19ed30ca4f9bcf6bf1dffa02ccb76da33915.
//
// Solidity: event UndelegatedBatch(address indexed owner, address indexed from, uint256 indexed nftIndex, uint256[] tokenIds)
func (_DavinciDao *DavinciDaoFilterer) WatchUndelegatedBatch(opts *bind.WatchOpts, sink chan<- *DavinciDaoUndelegatedBatch, owner []common.Address, from []common.Address, nftIndex []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var nftIndexRule []interface{}
	for _, nftIndexItem := range nftIndex {
		nftIndexRule = append(nftIndexRule, nftIndexItem)
	}

	logs, sub, err := _DavinciDao.contract.WatchLogs(opts, "UndelegatedBatch", ownerRule, fromRule, nftIndexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DavinciDaoUndelegatedBatch)
				if err := _DavinciDao.contract.UnpackLog(event, "UndelegatedBatch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUndelegatedBatch is a log parse operation binding the contract event 0x56017da320cb00880eb511a7183d19ed30ca4f9bcf6bf1dffa02ccb76da33915.
//
// Solidity: event UndelegatedBatch(address indexed owner, address indexed from, uint256 indexed nftIndex, uint256[] tokenIds)
func (_DavinciDao *DavinciDaoFilterer) ParseUndelegatedBatch(log types.Log) (*DavinciDaoUndelegatedBatch, error) {
	event := new(DavinciDaoUndelegatedBatch)
	if err := _DavinciDao.contract.UnpackLog(event, "UndelegatedBatch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DavinciDaoWeightChangedIterator is returned from FilterWeightChanged and is used to iterate over the raw logs and unpacked data for WeightChanged events raised by the DavinciDao contract.
type DavinciDaoWeightChangedIterator struct {
	Event *DavinciDaoWeightChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DavinciDaoWeightChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DavinciDaoWeightChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DavinciDaoWeightChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DavinciDaoWeightChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DavinciDaoWeightChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DavinciDaoWeightChanged represents a WeightChanged event raised by the DavinciDao contract.
type DavinciDaoWeightChanged struct {
	Account        common.Address
	PreviousWeight *big.Int
	NewWeight      *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterWeightChanged is a free log retrieval operation binding the contract event 0xee82339564ef9f72eccdbb67b46a62198422524ab9c7e3fcbdd194fa1b46461b.
//
// Solidity: event WeightChanged(address indexed account, uint88 previousWeight, uint88 newWeight)
func (_DavinciDao *DavinciDaoFilterer) FilterWeightChanged(opts *bind.FilterOpts, account []common.Address) (*DavinciDaoWeightChangedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _DavinciDao.contract.FilterLogs(opts, "WeightChanged", accountRule)
	if err != nil {
		return nil, err
	}
	return &DavinciDaoWeightChangedIterator{contract: _DavinciDao.contract, event: "WeightChanged", logs: logs, sub: sub}, nil
}

// WatchWeightChanged is a free log subscription operation binding the contract event 0xee82339564ef9f72eccdbb67b46a62198422524ab9c7e3fcbdd194fa1b46461b.
//
// Solidity: event WeightChanged(address indexed account, uint88 previousWeight, uint88 newWeight)
func (_DavinciDao *DavinciDaoFilterer) WatchWeightChanged(opts *bind.WatchOpts, sink chan<- *DavinciDaoWeightChanged, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _DavinciDao.contract.WatchLogs(opts, "WeightChanged", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DavinciDaoWeightChanged)
				if err := _DavinciDao.contract.UnpackLog(event, "WeightChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWeightChanged is a log parse operation binding the contract event 0xee82339564ef9f72eccdbb67b46a62198422524ab9c7e3fcbdd194fa1b46461b.
//
// Solidity: event WeightChanged(address indexed account, uint88 previousWeight, uint88 newWeight)
func (_DavinciDao *DavinciDaoFilterer) ParseWeightChanged(log types.Log) (*DavinciDaoWeightChanged, error) {
	event := new(DavinciDaoWeightChanged)
	if err := _DavinciDao.contract.UnpackLog(event, "WeightChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
